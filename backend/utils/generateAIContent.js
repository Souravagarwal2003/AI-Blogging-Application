import axios from 'axios';
import dotenv from 'dotenv';

dotenv.config();

const GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${process.env.GOOGLE_GEMINI_API_KEY}`;

const listGeminiModels = async () => {
    try {
        const listModelsUrl = `https://generativelanguage.googleapis.com/v1beta/models?key=${process.env.GOOGLE_GEMINI_API_KEY}`;
        console.log('Fetching Gemini models from:', listModelsUrl);
        const response = await axios.get(listModelsUrl);
        console.log('Available Gemini Models:', JSON.stringify(response.data, null, 2));
    } catch (error) {
        console.error('Error listing Gemini models:', error.response?.data || error.message);
    }
};

// Call this function once (e.g., at the start of your server or before calling generateAIContent)
// For example, you can add it to your server.js or call it directly in generateAIContent.js for a test run.
 listGeminiModels();

const generateAIContent = async (title) => {
  try {
    // Basic validation for the API Key
    if (!process.env.GOOGLE_GEMINI_API_KEY) {
      console.error('Error: GOOGLE_GEMINI_API_KEY is not set in your .env file.');
      throw new Error('Gemini API key is missing.');
    }

    const promptText = `Write a full blog article titled: "${title}"`;

    const response = await axios.post(
      GEMINI_API_URL,
      {
        contents: [
          {
            parts: [{ text: promptText }]
          }
        ]
      },
      {
        headers: {
          'Content-Type': 'application/json'
        }
      }
    );

    // --- IMPORTANT: Enhanced Error Handling for Gemini API Responses ---

    // Log the full response data for debugging purposes (temporarily)
    console.log('Full Gemini API response data:', JSON.stringify(response.data, null, 2));

    // Check if the response contains an 'error' object
    if (response.data.error) {
      console.error('Gemini API returned an error:', response.data.error);
      throw new Error(`Gemini API Error: ${response.data.error.message || 'Unknown API error'}`);
    }

    // Check for candidates array
    if (!response.data.candidates || response.data.candidates.length === 0) {
      console.warn('Gemini API response did not contain any candidates for content generation.');
      // Handle cases where no candidates are returned, but no explicit error
      return 'No content could be generated by the AI for this prompt. Please try again with a different title.';
    }

    // Safely extract content
    const generatedText = response.data.candidates?.[0]?.content?.parts?.[0]?.text;

    if (!generatedText) {
        console.warn('Gemini API response did not contain expected text content in candidates.');
        return 'The AI generated content, but it was not in the expected text format. Please review the response.';
    }

    console.log('Gemini API response content:', generatedText); // Log the successfully extracted content
    return generatedText;

  } catch (err) {
    console.error('Error in generateAIContent:', err);

    // Provide more specific error messages based on the type of error
    if (axios.isAxiosError(err)) {
      if (err.response) {
        // The request was made and the server responded with a status code
        // that falls out of the range of 2xx
        console.error('Gemini API Response Error:', err.response.status, err.response.data);
        throw new Error(`Gemini API responded with status ${err.response.status}: ${JSON.stringify(err.response.data.error || err.response.data)}`);
      } else if (err.request) {
        // The request was made but no response was received
        console.error('No response received from Gemini API:', err.request);
        throw new Error('No response from Gemini API. Check network or API endpoint.');
      } else {
        // Something happened in setting up the request that triggered an Error
        console.error('Axios request setup error:', err.message);
        throw new Error(`Error setting up Gemini API request: ${err.message}`);
      }
    } else {
      // General JavaScript error or custom error
      throw new Error(`Failed to generate blog content: ${err.message}`);
    }
  }
};

export default generateAIContent;